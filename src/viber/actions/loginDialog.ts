import { dialogStates, customers, employeesByCustomer, accountLink } from "../../server";
import { normalizeStr } from "../../util/utils";
import { IDialogStateLoggingIn, IEmployee } from "../../types";
import { FileDB } from "../../util/fileDB";
import { keyboardLogin, keyboardMenu } from "../../telegram/util/keybord";
import path from 'path';
import { withMenu } from "../viber";
const TextMessage = require('viber-bot').Message.Text;
const KeyboardMessage = require('viber-bot').Message.Keyboard;


export const loginDialog = async (bot: any, response: any, message: any, start = false) => {

  // if (!ctx.chat) {
  //   throw new Error('Invalid context');
  // }

  const chatId = response.userProfile.id.toString();

  if (start) {
    await withMenu(bot, response, [
      TextMessage('–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –≤–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')])
    dialogStates.merge(chatId, { type: 'LOGGING_IN', lastUpdated: new Date().getTime(), employee: {} });
  }

  const dialogState = dialogStates.getMutable(true)[chatId];

  if (!dialogState || dialogState.type !== 'LOGGING_IN') {
    throw new Error('Invalid dialog state');
  }

  const text = start ? '' : normalizeStr(message);
  const { employee } = dialogState as IDialogStateLoggingIn;

  if (text) {
    if (!employee.customerId) {
      const found = Object.entries(customers.getMutable(false)).find( ([_, c]) =>
        normalizeStr(c.name) === text || c.aliases.find(
          a => normalizeStr(a) === text
        )
      );

      if (found) {
        employee.customerId = found[0];
      } else {
       // await withMenu(ctx, 'üòï –¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!', keyboardLogin);
        await withMenu(bot, response, [
          TextMessage('üòï –¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!'),
          KeyboardMessage([keyboardLogin])
        ]);
        dialogStates.merge(chatId, { type: 'INITIAL', lastUpdated: new Date().getTime() }, ['employee']);
        return;
      }
    }
    else if (!employee.firstName) {
      employee.firstName = text;
    }
    else if (!employee.lastName) {
      employee.lastName = text;
    }
    else if (!employee.patrName) {
      employee.patrName = text;
    }
    else if (!employee.passportId) {
      employee.passportId = text;
    }
    else if (!employee.tabNumber) {
      employee.tabNumber = text;
    }
  }

  if (employee.tabNumber && employee.customerId) {
    let employees = employeesByCustomer[employee.customerId];

    if (!employees) {
      employees = new FileDB<IEmployee>(path.resolve(process.cwd(), `data/employee.${employee.customerId}.json`), {});
      employeesByCustomer[employee.customerId] = employees;
    }

    const found = Object.entries(employees.getMutable(false)).find(
      ([_, e]) =>
        normalizeStr(e.firstName) === employee.firstName
        &&
        normalizeStr(e.lastName) === employee.lastName
        &&
        normalizeStr(e.patrName) === employee.patrName
        &&
        normalizeStr(e.passportId) === employee.passportId
        &&
        normalizeStr(e.tabNumber) === employee.tabNumber
    );

    if (found) {
      accountLink.merge(chatId, {
        customerId: employee.customerId,
        employeeId: found[0]
      });
      accountLink.flush();
      dialogStates.merge(chatId, { type: 'LOGGED_IN', lastUpdated: new Date().getTime() }, ['employee']);
      //withMenu(ctx, 'üèÅ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.', keyboardMenu);
      await withMenu(bot, response, [
        TextMessage('üèÅ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.'),
        KeyboardMessage([keyboardMenu])
      ]);
    } else {
      await withMenu(bot, response, [
        TextMessage(
`
–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.

–ë—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:
–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ: ${employee.customerId}
–ò–º—è: ${employee.firstName}
–§–∞–º–∏–ª–∏—è: ${employee.lastName}
–û—Ç—á–µ—Å—Ç–≤–æ: ${employee.patrName}
–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: ${employee.passportId}
–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: ${employee.tabNumber}
`),
        KeyboardMessage([keyboardLogin])
      ]);

      dialogStates.merge(chatId, { type: 'INITIAL', lastUpdated: new Date().getTime() }, ['employee']);
    }
  } else {
    if (!employee.customerId) {
      await withMenu(bot, response, [TextMessage('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è:')]);
      //withMenu(ctx, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è:');
    }
    else if (!employee.firstName) {
      await withMenu(bot, response, [TextMessage('–í–≤–µ–¥–∏—Ç–µ –∏–º—è:')]);
      //withMenu(ctx, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è:');
    }
    else if (!employee.lastName) {
      await withMenu(bot, response, [TextMessage('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:')]);
     // withMenu(ctx, '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:');
    }
    else if (!employee.patrName) {
      await withMenu(bot, response, [TextMessage('–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ:')]);
      //withMenu(ctx, '–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ:');
    }
    else if (!employee.passportId) {
      await withMenu(bot, response, [TextMessage('–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ –ø–∞—Å–ø–æ—Ä—Ç–∞:')]);
      //withMenu(ctx, '–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ –ø–∞—Å–ø–æ—Ä—Ç–∞:');
    }
    else if (!employee.tabNumber) {
      await withMenu(bot, response, [TextMessage('–í–≤–µ–¥–∏—Ç–µ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∫–∞:')]);
      //withMenu(ctx, '–í–≤–µ–¥–∏—Ç–µ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∫–∞:');
    }
  }
};