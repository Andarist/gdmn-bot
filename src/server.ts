import Koa from "koa";
import bodyParser from 'koa-bodyparser';
import Router from 'koa-router';
import https from 'https';
import http from 'http';
import fs from 'fs';
import path from 'path';
import Telegraf, { Extra, Markup, ContextMessageUpdate } from 'telegraf';
import { IAccountLink, DialogState, ICustomer, IEmployee, IAccDed, IPaySlip, IDialogStateGettingCurrency, NBRBCurrencies, NBRBRates } from "./types";
import { FileDB } from "./util/fileDB";
import { InlineKeyboardMarkup } from "telegraf/typings/telegram-types";
import { paySlipConciseDialog } from "./actions/paySlipConciseDialog";
import { paySlipCompareDialog } from "./actions/paySlipCompareDialog";
import { keyboardLogin, keyboardMenu, keyboardSettings } from "./util/keybord";
import { loginDialog } from "./actions/loginDialog";
import { getPaySlip } from "./actions/getPaySlip";
import { upload } from "./actions/upload";
import { currencyDialog } from "./actions/currencyDialog";

/**
 * –°–≤—è–∑—å –º–µ–∂–¥—É –ò–î —á–∞—Ç–∞ –∏ —á–µ–ª–æ–≤–µ–∫–æ–º, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è.
 */
export const accountLink = new FileDB<IAccountLink>(path.resolve(process.cwd(), 'data/accountlink.json'), {});
export const dialogStates = new FileDB<DialogState>(path.resolve(process.cwd(), 'data/dialogstates.json'), {});
export const customers = new FileDB<Omit<ICustomer, 'id'>>(path.resolve(process.cwd(), 'data/customers.json'), {});
export const employeesByCustomer: { [customerId: string]: FileDB<Omit<IEmployee, 'id'>> } = {};

/**
 * —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π/—É–¥–µ—Ä–∂–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
 * –∫–ª—é—á–µ–º –æ–±—ä–µ–∫—Ç–∞ –≤—ã—Å—Ç—É–ø–∞–µ—Ç –†–£–ò–î –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –ì–µ–¥—ã–º–∏–Ω–∞.
 */
export const customerAccDeds: { [customerID: string]: FileDB<IAccDed> } = {};

/**
 * –†–∞—Å—á–µ—Ç–Ω—ã–µ –ª–∏—Å—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
 * –ö–ª—é—á–µ–º –æ–±—ä–µ–∫—Ç–∞ –≤—ã—Å—Ç—É–ø–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ –ø–∞—Å–ø–æ—Ä—Ç–∞.
 */
export const paySlips: { [employeeId: string]: FileDB<IPaySlip> } = {};

let app = new Koa();
let router = new Router();

const config = {
  domain: 'gs.selfip.biz',
  https: {
    port: 8443,
    options: {
      key: fs.readFileSync(path.resolve(process.cwd(), 'cert/gsbot-key.pem'), 'utf8').toString(),
      cert: fs.readFileSync(path.resolve(process.cwd(), 'cert/gsbot-cert.pem'), 'utf8').toString(),
    },
  },
};

router.get('/load', (ctx, next) => {
  // ctx.router available
  load(ctx);
  next();
});

const load = (ctx: any) => {
  ctx.body = 'Hello World!';
}

router.get('/', (ctx, next) => {
  ctx.body = 'Hello World!';
  next();
});

router.post('/upload', (ctx, next) => {
  upload(ctx);
  next();
});

app
  .use(bodyParser())
  .use(router.routes())
  .use(router.allowedMethods());

const serverCallback = app.callback();

http.createServer(serverCallback).listen(3000);
https.createServer(config.https.options, serverCallback).listen(config.https.port);

export const withMenu = async (ctx: ContextMessageUpdate, msg: string, menu?: Markup & InlineKeyboardMarkup, markdown?: boolean) => {
  if (!ctx.chat) {
    throw new Error('Invalid context');
  }

  const m = markdown
    ? await ctx.reply(msg, menu && { parse_mode: 'MarkdownV2', ...Extra.markup(menu) })
    : await ctx.reply(msg, menu && Extra.markup(menu));

  const chatId = ctx.chat.id.toString();
  const dialogState = dialogStates.read(chatId);

  if (dialogState) {
    if (dialogState.menuMessageId) {
      try {
        await bot.telegram.editMessageReplyMarkup(ctx.chat.id, dialogState.menuMessageId);
      }
      catch (e) {
        // TODO: –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞, —Ç–æ
        // –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞, –∫–æ—Ç–æ—Ä—É—é –º—ã –ø–æ–¥–∞–≤–ª—è–µ–º.
        // –í –±—É–¥—É—â–µ–º –Ω–∞–¥–æ –ª–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        // –∏ —É–±–∏—Ä–∞—Ç—å –µ–≥–æ –ò–î –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      }
    }

    if (menu) {
      dialogStates.merge(chatId, { menuMessageId: m.message_id });
    } else {
      dialogStates.merge(chatId, { menuMessageId: undefined });
    }
  }
};

if (typeof process.env.GDMN_BOT_TOKEN !== 'string') {
  throw new Error('GDMN_BOT_TOKEN env variable is not specified.');
}

const bot = new Telegraf(process.env.GDMN_BOT_TOKEN);

bot.use( (ctx, next) => {
  console.log(`Chat ${ctx.chat?.id}: ${ctx.updateType} ${ctx.message?.text !== undefined ? ('-- ' + ctx.message?.text) : ''}`);
  return next && next();
});

/**
 * –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω
 * –∫ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –∏–ª–∏ –Ω–µ—Ç.
 *
 * –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
 *
 * –ï—Å–ª–∏ –¥–∞, —Ç–æ –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é —Å –¥–∞–ª—å–Ω–µ–π—à–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏.
 */
bot.start(
  ctx => {

    if (!ctx.chat) {
      withMenu(ctx, 'Error: Invalid chat Id');
    } else {
      const chatId = ctx.chat.id.toString();
      const link = accountLink.read(chatId);

      if (!link) {
        dialogStates.merge(chatId, { type: 'INITIAL', lastUpdated: new Date().getTime() });
        withMenu(ctx,
          '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ.',
          keyboardLogin);
      } else {
        dialogStates.merge(chatId, { type: 'LOGGED_IN', lastUpdated: new Date().getTime() });
        withMenu(ctx,
          '–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.',
          keyboardMenu);
      }
    }
  }
);

bot.help( ctx => withMenu(ctx, 'Help message') );

bot.on('message', async (ctx) => {
  if (ctx.chat) {
    const chatId = ctx.chat.id.toString();
    const dialogState = dialogStates.read(chatId);

    if (dialogState?.type === 'LOGGING_IN') {
      loginDialog(ctx);
    } else if (dialogState?.type === 'GETTING_CURRENCY' || dialogState?.type === 'GETTING_SETTINGS') {
      withMenu(ctx,
        `
        ü§î –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞.

        –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
        `, keyboardMenu);
    }
    else if (dialogState?.type === 'LOGGED_IN') {
      if (ctx.message?.text === '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏') {
        ctx.reply(Object.values(customers).map( c => c.name).join(', '));
        ctx.reply(ctx.chat.id.toString());
        ctx.reply(ctx.from!.id.toString());
        ctx.reply(ctx.from!.username!);
      } else {
        withMenu(ctx,
`
ü§î –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω–∞.

–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
`, keyboardMenu);
      }
    }
    else {
      withMenu(ctx,
        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ.',
        keyboardLogin);
    }
  }
});

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ. –ü—Ä–∏–≤—è–∑–∫–∞ –ò–î —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –∫ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
 * –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–∞—Å—á–µ—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã.
 */
bot.action('login', ctx => {
  if (ctx.chat) {
    loginDialog(ctx, true);
  }
});

bot.action('logout', async (ctx) => {
  if (ctx.chat) {
    await withMenu(ctx, 'üíî –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!', keyboardLogin);
    const chatId = ctx.chat.id.toString();
    accountLink.delete(chatId);
    dialogStates.merge(chatId, { type: 'INITIAL', lastUpdated: new Date().getTime() }, ['employee']);
  }
});

bot.action('paySlip', ctx => {
  const today = new Date();
  const db = new Date(today.getFullYear()-1, today.getMonth() + 1, 1);
  const de = new Date(today.getFullYear()-1, today.getMonth() + 2, 0);
  const cListok = getPaySlip(ctx, 'CONCISE', db, de);
  cListok && withMenu(ctx, cListok, keyboardMenu, true);
});

bot.action('detailPaySlip', ctx => {
  const today = new Date();
  const db = new Date(today.getFullYear()-1, today.getMonth() + 1, 1);
  const de = new Date(today.getFullYear()-1, today.getMonth() + 2, 0);
  const cListok = getPaySlip(ctx, 'DETAIL', db, de);
  cListok && withMenu(ctx, cListok, keyboardMenu, true);
});

bot.action('paySlipByPeriod', ctx => {
  if (ctx.chat) {
    paySlipConciseDialog(ctx, true);
  }
});

bot.action('paySlipCompare', ctx => {
  if (ctx.chat) {
    paySlipCompareDialog(ctx, true);
  }
});

bot.action('settings', ctx => {
  if (ctx.chat) {
    dialogStates.merge(ctx.chat.id.toString(), { type: 'GETTING_SETTINGS', lastUpdated: new Date().getTime() });
    withMenu(ctx, '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã', keyboardSettings);
  }
});

bot.action('menu', ctx => {
  if (ctx.chat) {
    withMenu(ctx, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π', keyboardMenu, true);
  }
});

bot.action('getCurrency', ctx => {
  if (ctx.chat) {
    currencyDialog(ctx, true);
  }
});

bot.on('callback_query', async (ctx) => {
  if (ctx.chat) {
    const chatId = ctx.chat.id.toString();
    const dialogState = dialogStates.read(chatId);
    if (dialogState?.type === 'GETTING_CONCISE') {
      paySlipConciseDialog(ctx);
    } else if (dialogState?.type === 'GETTING_COMPARE') {
      paySlipCompareDialog(ctx)
    } else if (dialogState?.type === 'GETTING_CURRENCY') {
      currencyDialog(ctx);
    }
  }
})

bot.action('delete', ({ deleteMessage }) => deleteMessage());

bot.launch();

/**
 * –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞ —Å–∫–∏–¥—ã–≤–∞–µ–º –Ω–∞ –¥–∏—Å–∫ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ.
 */
process.on('exit', code => {
  accountLink.flush();
  dialogStates.flush();
  customers.flush();

  for (const ec of Object.values(employeesByCustomer)) {
    ec.flush();
  }

  console.log('Process exit event with code: ', code);
});

process.on('SIGINT', () => process.exit() );

